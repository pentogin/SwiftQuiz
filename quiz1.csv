Swiftで値を保持するための変数は定数と変数です,1,正解,不正解
変数や定数に値を入れることを代入といいます,1,正解,不正解
宣言時に型を明示的に指定することができ、この型の部分を 型アノテーションと言います,1,正解,不正解
定数を宣言するときはletを使用しますが、変数を使用するときはverを使用する,2,正解,不正解
定数や変数を宣言するときに型を明示的に指定することを型推論という,1,正解,不正解
変数や定数への最初の代入を初期化といいます,1,正解,不正解
スコープとは、変数、定数、関数、型の名前の有効範囲を表すものです。グローバルスコープとローカルスコープの２種類に分類できます,1,正解,不正解
リテラルとは、１や"abc"などの値をプログラムに直接表記する書式です,1,正解,不正解
型のメンバーとは、型の値や型自身に紐付く変数、定数、関数、型などのことです。値に紐付く変数や定数のことをプロパティと言い、型に紐付く関数のことをメソッドといいます,1,正解,不正解
クロージャとは、処理をまとめて呼び出し可能にしたものです。クロージャの入力値を引数と言い、出力値を戻り値といいます,1,正解,不正解
関数とは、処理をまとめて呼び出し可能にしたものです。関数の入力値を引数と言い、出力値を戻り値と言います。関数の呼び出しは式であり、式が返す値は関数の戻り値となります,1,正解, 不正解
イニシャライザは、型のインスタンスを生成するための処理をまとめたものです。型のインスタンスとは、型の実体です,1,正解,不正解
浮動小数点リテラルのデフォルトの型はDouble型です,1,正解,不正解
\nのことをラインフィードという,1,正解,不正解
\rのことをキャリッジリターンという,正解,不正解
\"のことをダブルクオートという,1,正解,不正解
\'のことをシングルクオートという,1,正解,不正解
\\のことをバックスラッシュという、1,正解,不正解
\()というエスケープシーケンスを用いて、値を文字列リテラル内で展開できます,1,正解,不正解
複数行にまたがる文字列を生成する場合は、複数行の文字列リテラルを使用します。複数行の文字列リテラルは、次のように複数行の文字列を"""(スリーダブルクオート）で囲んで書きます,1,正解,不正解
"""や終了の"""と同じ行に文字列が書かれている場合はコンパイルエラーとなります,1,正解,不正解
String型と数値型の相互変換にはイニシャライザを使用します,1,正解,不正解
真理値を表す型をBool型と言いますが、偽であればtrueの値を返します,2,正解,不正解
文字列を表す型をString型という,1,正解,不正解
String型の値と判断する" "をダブルタプルという,2,正解,不正解
Swiftで整数を表す型は、Int型である,1,正解,不正解
Swiftで浮動小数点を表す型は、Float型とDouble型ですが、より高度な計算ができる方はFloat型である,2,正解,不正解
イニシャライザとは型変換させる時に使用する。,1,正解,不正解
イニシャライザの使用方法は、　型名()で実行する,1,正解,不正解
左辺と右辺が一致した時に使う演算子は、　＝である,2,正解,不正解
左辺と右辺が一致しない時に使う演算子は、　!=である,1,正解,不正解
左辺が右辺より大きい時に使う演算子は、<である,2,正解,不正解
左辺が右辺以上の時に使う演算子は、>!である,2,正解,不正解
Swiftでは、値がない状態をnilで表します。1,正解,不正解
Optional型の宣言をするときは、変数の後ろに？を記述します,1,正解,不正解
Optional<Wrapped>型のWrappedはプレースホルダ型と言います。<>内にプレースホルダー型を持つ型をジェネリック型と言います,1,正解,不正解

Optional型の値に対して操作を行う場合は、一度値を取り出す必要があります。そのことをイニシャライザという,2,正解,不正解
アンラップをする方法は３種類ある,1,正解,不正解
if let 定数名　= Optional型の値 {} をOptionalBindingという,1,正解,不正解
Optional Bindingは条件分岐や繰り返しの条件で使用することができる,1,正解,不正解
guard文は、条件が成立しないときに実行される構文です。1,正解,不正解
??演算子は、値が存在する場合にデフォルトの値を代入することができる,1,正解,不正解
！演算子は、強制的にOptional型の値を取り出すことができる,1,正解,不正解
Tuple型とは複数の型を一つにまとめて扱う型のことです,1,正解,不正解
Void型とは関数の戻り値がない時に使われます,1,正解,不正解
Any型の変数や定数にはどのような型の値も代入できるため、代入する値の型が決まっていない場合に使用します,1,正解,不正解
Any型の変数や定数に代入すると、もとの型の情報は失われてしまうため、もとの型では可能だった操作ができなくなってしまいます,1,正解,不正解
複数の型をまとめて１つの型として扱うタプル型という,1,正解,不正解
タプル型を定義するには、要素となる型を（）内に、区切りで（型名１、型名２、型名３）のように列挙します,1,正解,不正解
要素の型が０個のタプル型をVoid型と言います。値が存在し得ないことを表す型です,1,正解,不正解

